// Generated by CoffeeScript 1.6.2
(function() {
  var CRITICAL, Dog, HIGH, INFO, LOW, NORMAL, Reality, Species, planet, toto;

  CRITICAL = 1000000;

  HIGH = 10000;

  NORMAL = 100;

  LOW = 10;

  INFO = 1;

  Reality = (function() {
    function Reality(basePulsesPerSecond) {
      var loglevel;

      this.basePulsesPerSecond = basePulsesPerSecond;
      loglevel = INFO;
      this.species = {};
      this.creatures = [];
      this.tickInterval = this.basePulsesPerSecond * 1000;
    }

    Reality.prototype.perSecond = function(number) {
      return this.basePulsesPerSecond * number;
    };

    Reality.prototype.addCreature = function(creature) {
      return this.creatures.push(creature);
    };

    Reality.prototype.run = function() {
      this.startedAt = new Date();
      this._interval = setInterval(this.tick.bind(this), this.tickInterval);
      return this.tick();
    };

    Reality.prototype.tick = function() {
      var c, _i, _len, _ref;

      _ref = this.creatures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        console.log('pulse', c.species, c.attributes.energy);
        c.pulse();
      }
      return 1;
    };

    return Reality;

  })();

  planet = new Reality(1);

  Species = (function() {
    function Species() {}

    Species._all = {};

    Species.register = function(name, reality) {
      var k, proto, v, _ref;

      proto = function() {
        var k, v, _ref;

        this.species = name;
        this.reality = reality;
        this.attributes = {};
        this.newEvents = [];
        _ref = this.baseAttributes;
        for (k in _ref) {
          v = _ref[k];
          this.attributes[k] = v;
        }
        return this;
      };
      reality.species[name] = proto;
      proto.prototype.biologicalRoutines = {};
      proto.prototype.actions = {};
      proto.prototype.priorityMap = {};
      _ref = Species.instance;
      for (k in _ref) {
        v = _ref[k];
        proto.prototype[k] = v;
      }
      proto.defineAction = function(label, fn) {
        return proto.prototype.actions[label] = fn;
      };
      proto.defineBiologicalRoutine = function(label, fn) {
        return proto.prototype.biologicalRoutines[label] = fn;
      };
      proto.defineBaseAttributes = function(attributes) {
        return proto.prototype.baseAttributes = attributes;
      };
      proto.definePriority = function(label, fn) {
        return proto.prototype.priorityMap[label] = fn;
      };
      return proto;
    };

    Species.instance = {
      pulse: function() {
        this.biologicalMaintenance();
        this.senseEnvironment();
        this.understandEvents();
        this.evaluatePriorities();
        this.addressPriorities();
        return this.takeAction();
      },
      biologicalMaintenance: function() {
        var name, routine, _ref;

        _ref = this.biologicalRoutines;
        for (name in _ref) {
          routine = _ref[name];
          this.log(INFO, "running " + name);
          routine.call(this);
        }
        return 1;
      },
      setName: function(name) {
        this.name = name;
      },
      setAttribute: function(attr, value) {
        return this.attributes[attr] = value;
      },
      evaluatePriorities: function() {
        return evaluatePriorities;
      },
      log: function(priority, message) {
        if (priority >= this.reality.loglevel) {
          return console.log(message);
        }
      },
      senseEnvironment: function() {
        return 1;
      },
      understandEvents: function() {
        return 2;
      },
      evaluatePriorities: function() {
        return 3;
      },
      addressPriorities: function() {
        return 4;
      },
      takeAction: function() {
        return 5;
      }
    };

    return Species;

  })();

  Dog = Species.register('Dog', planet);

  Dog.defineBaseAttributes({
    energy: 50,
    hungry: 50,
    happiness: 50,
    needToExercise: 10,
    jawStrength: 10,
    empathyToPeople: 50
  });

  Dog.defineBiologicalRoutine('methabolism', function() {
    return this.attributes.energy -= this.reality.perSecond(0.1);
  });

  Dog.defineAction('ask for food', function() {
    return this.log(CRITICAL, 'gimme food, yo!');
  });

  Dog.definePriority('hunger', function() {
    return (100 - this.attributes.energy) * 10;
  });

  toto = new Dog();

  planet.addCreature(toto);

  planet.run();

}).call(this);
