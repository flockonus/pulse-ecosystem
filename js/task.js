// Generated by CoffeeScript 1.6.2
/*
  Activity performed by some species in order to address one or more priorities
  May also be understood as a solution to a problem
*/


(function() {
  var Task, TaskBitchToConsole,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Task = (function() {
    function Task(label, performer) {
      this.label = label;
      this.performer = performer;
      this.completed = 0;
      if (!(this.label && this.performer)) {
        throw "missing label and or performer";
      }
      if (!this.canBePerformed) {
        throw "" + performer.species + " cant perform this";
      }
    }

    Task.prototype.speciesAllowed = function() {
      return [];
    };

    Task.prototype.canBePerformed = function() {
      return this.speciesAllowed.indexOf(this.performer.species) > -1;
    };

    /*
      should add to @completed,
        fail,
        or something like that
      
      return: Number(0..1)
    */


    Task.prototype.perform = function() {
      return this.completed;
    };

    /*
      #TODO needs more thinking on this
    
      if completed == 100 it return true, false otehrwise
    */


    Task.prototype.isDone = function() {
      return this.completed === 100;
    };

    return Task;

  })();

  /*
    Performer: Species
  
    Message: String
      raw dump to console
  */


  TaskBitchToConsole = (function(_super) {
    __extends(TaskBitchToConsole, _super);

    function TaskBitchToConsole(performer, message) {
      this.performer = performer;
      this.message = message;
      TaskBitchToConsole.__super__.constructor.call(this, 'BitchToConsole', this.performer);
    }

    TaskBitchToConsole.prototype.perform = function() {
      console.log("" + this.performer.name + "(" + this.performer.species + "): " + this.message);
      return done();
    };

    return TaskBitchToConsole;

  })(Task);

  module.Task = Task;

  module.TaskBitchToConsole = TaskBitchToConsole;

}).call(this);
